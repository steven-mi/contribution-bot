import numpy as np
import datetime
import os

A = [
    [0, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 0, 1, 0, 0],
    [0, 1, 1, 1, 1, 1, 1],
]

B = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [0, 1, 1, 0, 1, 1, 0],
]

C = [
    [0, 1, 1, 1, 1, 1, 0],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 1, 0],
]

D = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 1, 0],
    [0, 0, 1, 1, 1, 0, 0],
]

E = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
]

F = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0],
]

G = [
    [0, 1, 1, 1, 1, 1, 0],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [0, 1, 0, 1, 1, 1, 0],
]

H = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1],
]

I = [
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1],
]

J = [
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0],
]
K = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 0, 1, 0, 1, 0, 0],
    [0, 1, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 1],
]
L = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1],
]

M = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 1, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1],
]

N = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1],
]

O = [
    [0, 1, 1, 1, 1, 1, 0],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [0, 1, 1, 1, 1, 1, 0],
]

P = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 0],
]

Q = [
    [0, 1, 1, 1, 1, 1, 0],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1, 1],
    [0, 1, 1, 1, 1, 1, 0],
]

R = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1, 0, 0],
    [1, 0, 0, 1, 0, 1, 0],
    [1, 1, 1, 1, 0, 0, 1],
]

S = [
    [1, 1, 1, 1, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 1],
]

T = [
    [1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0],
]

U = [
    [1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 0],
]

V = [
    [1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 0],
]

W = [
    [1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 1],
]
X = [
    [1, 1, 0, 0, 0, 1, 1],
    [0, 0, 1, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0],
    [1, 1, 0, 0, 0, 1, 1],
]
Y = [
    [1, 1, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1],
    [0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0],
]

Z = [
    [1, 0, 0, 0, 0, 1, 1],
    [1, 0, 0, 0, 1, 0, 1],
    [1, 0, 0, 1, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 1],
    [1, 1, 0, 0, 0, 0, 1],
]

SPACE = [[0, 0, 0, 0, 0, 0, 0]]

MIN_CONTRIB = 10


def main(word):
    word_mat = generate_sparse_mat(word.upper())
    print_mat(word_mat)
    word_mat = word_mat * MIN_CONTRIB
    counter = 0
    today = datetime.datetime(year=2022, month=1, day=2, hour=23, minute=2)
    for row in word_mat.T:
        for val in row:
            commit_date = today + datetime.timedelta(days=counter)
            execute_cmd(f"""git commit --allow-empty -m "EMPTY COMMIT" --date="{commit_date}" """, val)
            counter = counter + 1


def execute_cmd(cmd, frequency):
    for _ in range(frequency):
        os.system(cmd)


def generate_sparse_mat(word):
    word_mat = np.array(globals()["SPACE"]).T
    for letter in word:
        if letter == " ":
            word_mat = np.append(word_mat, np.array(globals()["SPACE"]).T, axis=1)
            word_mat = np.append(word_mat, np.array(globals()["SPACE"]).T, axis=1)
        else:
            word_mat = np.append(word_mat, np.array(globals()[letter]).T, axis=1)
            word_mat = np.append(word_mat, np.array(globals()["SPACE"]).T, axis=1)
    return word_mat


def print_mat(mat):
    for row in mat:
        row_str = ""
        for val in row:
            row_str = f"{row_str} {val}"
        print(row_str)


if __name__ == '__main__':
    main('Steven Mi')
