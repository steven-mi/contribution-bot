import datetime
import os

MIN_CONTRIB = 15
TEXT = "Steven Mi"
FIRST_CONTRIB_DATE = datetime.datetime(year=2022, month=1, day=2, hour=23, minute=2)

A = [
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0, 0],
    [MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0, 0],
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]

B = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [0, MIN_CONTRIB, MIN_CONTRIB, 0, MIN_CONTRIB, MIN_CONTRIB, 0],
]

C = [
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0],
]

D = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0],
    [0, 0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0],
]

E = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
]

F = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, 0],
]

G = [
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [0, MIN_CONTRIB, 0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
]

H = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [0, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]

I = [
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
]

J = [
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
]
K = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, MIN_CONTRIB, 0, MIN_CONTRIB, 0, 0],
    [0, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
]
L = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
]

M = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, MIN_CONTRIB, 0, 0, 0, 0, 0],
    [0, 0, MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0],
    [0, MIN_CONTRIB, 0, 0, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]

N = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, MIN_CONTRIB, 0, 0, 0, 0],
    [0, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]

O = [
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
]

P = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0],
]

Q = [
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, MIN_CONTRIB, MIN_CONTRIB],
    [0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
]

R = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, MIN_CONTRIB, 0, 0],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, MIN_CONTRIB, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
]

S = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]

T = [
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
    [MIN_CONTRIB, 0, 0, 0, 0, 0, 0],
]

U = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0],
]

V = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0],
    [0, 0, 0, 0, 0, MIN_CONTRIB, 0],
    [0, 0, 0, 0, 0, 0, MIN_CONTRIB],
    [0, 0, 0, 0, 0, MIN_CONTRIB, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, 0, 0],
]

W = [
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, 0, 0, 0, MIN_CONTRIB, 0],
    [0, 0, 0, MIN_CONTRIB, MIN_CONTRIB, 0, 0],
    [0, 0, 0, 0, 0, MIN_CONTRIB, 0],
    [MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
]
X = [
    [MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, MIN_CONTRIB, 0, MIN_CONTRIB, 0, 0],
    [0, 0, 0, MIN_CONTRIB, 0, 0, 0],
    [0, 0, MIN_CONTRIB, 0, MIN_CONTRIB, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, MIN_CONTRIB],
]
Y = [
    [MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0, 0, 0],
    [0, 0, MIN_CONTRIB, 0, 0, 0, 0],
    [0, 0, 0, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB, MIN_CONTRIB],
    [0, 0, MIN_CONTRIB, 0, 0, 0, 0],
    [MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0, 0, 0],
]

Z = [
    [MIN_CONTRIB, 0, 0, 0, 0, MIN_CONTRIB, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, 0, MIN_CONTRIB, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, 0, MIN_CONTRIB, 0, 0, 0, MIN_CONTRIB],
    [MIN_CONTRIB, MIN_CONTRIB, 0, 0, 0, 0, MIN_CONTRIB],
]

SPACE = [[0, 0, 0, 0, 0, 0, 0]]
DOT = [[0, 0, 0, 0, 0, 0, MIN_CONTRIB]]


def main(word):
    word_mat = generate_sparse_mat(word.upper())
    counter = 0
    # Change date to first pixel of contribution chart
    for row in word_mat:
        row_str = ""
        for val in row:
            commit_date = FIRST_CONTRIB_DATE + datetime.timedelta(days=counter)
            row_str = f"{row_str} {commit_date}---{val}"
            execute_cmd(f"""git commit --allow-empty -m "EMPTY COMMIT" --date="{commit_date}" """, val)
            counter = counter + 1


def execute_cmd(cmd, frequency):
    for _ in range(frequency):
        os.system(cmd)


def generate_sparse_mat(word):
    word_mat = globals()["SPACE"]
    for letter in word:
        if letter == " ":
            word_mat = word_mat + globals()["SPACE"]
            word_mat = word_mat + globals()["SPACE"]
        else:
            word_mat = word_mat + globals()[letter]
            word_mat = word_mat + globals()["SPACE"]
    return word_mat


def print_mat(mat):
    for row in mat:
        row_str = ""
        for val in row:
            row_str = f"{row_str} {val}"
        print(row_str)


if __name__ == '__main__':
    main(TEXT)
